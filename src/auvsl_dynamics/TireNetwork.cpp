#include "TireNetwork.h"
#include "generated/model_constants.h"
#include <cmath>
#include <cppad/cppad.hpp>
#include <iostream>



TireNetwork::TireNetwork()
{
  out_std << 33.23321612383274, 26.304579611075567, 54.48882887004447;
  in_mean << 0.00505, 1.0, 5.0, 0.0;
  in_std_inv << 0.0028585679829120636, 0.5772117376327515, 2.884671449661255, 0.5774632096290588;
  in_std_inv = in_std_inv.cwiseInverse();  
}
TireNetwork::~TireNetwork(){}

//type overloading problem when taking address of std::tanh
//there is probably a smarter way to do this with templates.
inline double tanh_double_wrapper(double x){
  return std::tanh(x);
}

inline Scalar tanh_scalar_wrapper(Scalar x){
  return CppAD::tanh(x);
}

inline Scalar relu_wrapper(Scalar x){
  Scalar zero{0};
  return CppAD::CondExpGt(x, zero, x, zero);
}


// vx vy w zr wz
void TireNetwork::forward(const Eigen::Matrix<Scalar,8,1> &in_vec, Eigen::Matrix<Scalar,num_out_features,1> &out_vec, int ii){
  Eigen::Matrix<Scalar,TireNetwork::num_hidden_nodes,1> layer0_out;
  Eigen::Matrix<Scalar,TireNetwork::num_hidden_nodes,1> layer2_out;
  Eigen::Matrix<Scalar,TireNetwork::num_out_features,1> layer4_out;
  Eigen::Matrix<Scalar,TireNetwork::num_in_features,1> scaled_features;
  Eigen::Matrix<Scalar,TireNetwork::num_in_features,1> bekker_vec;
  
  // Changes features to cross the origin
  Scalar tire_tangent_vel = in_vec[2] * Jackal::rcg::tire_radius;
  Scalar diff = tire_tangent_vel - in_vec[0];
  Scalar slip_lon = CppAD::abs(in_vec[0]);
  Scalar slip_lat = CppAD::abs(in_vec[1]);
  Scalar tire_abs = CppAD::abs(in_vec[2]);
  
  bekker_vec[0] = in_vec[3];
  bekker_vec[1] = slip_lon;
  bekker_vec[2] = tire_abs;
  bekker_vec[3] = slip_lat;
  
  // Apply scaling after calculating the bekker features from kinematics
  scaled_features = (bekker_vec - in_mean).cwiseProduct(in_std_inv);
  
  // Actual NN math
  layer0_out = (m_params[ii].weight0*scaled_features) + m_params[ii].bias0;
  layer0_out = layer0_out.unaryExpr(&tanh_scalar_wrapper);
  layer2_out = (m_params[ii].weight2*layer0_out) + m_params[ii].bias2;
  layer2_out = layer2_out.unaryExpr(&tanh_scalar_wrapper);
  layer4_out = (m_params[ii].weight4*layer2_out) + m_params[ii].bias4;
  
  // Sign change passivity haxx
  out_vec[0] = relu_wrapper(layer4_out[0])*(1*diff);
  out_vec[1] = relu_wrapper(layer4_out[1])*(-1*in_vec[1]);
  out_vec[2] = relu_wrapper(layer4_out[2])/(1 + CppAD::exp(-1*in_vec[3]));
  
  // Scale output
  out_vec = out_vec.cwiseProduct(out_std);
}


int TireNetwork::getNumParams()
{
  return 4*(m_params[0].weight0.size() +
	    m_params[0].bias0.size() +
	    m_params[0].weight2.size() +
	    m_params[0].bias2.size() +
	    m_params[0].weight4.size() +
	    m_params[0].bias4.size());
}

void TireNetwork::setParams(const VectorS &params, int idx)
{
	assert(params.size() == getNumParams());
  
	for(int kk = 0; kk < num_networks; kk++)
	{
		for(int i = 0; i < m_params[kk].weight0.rows(); i++)
		{
			for(int j = 0; j < m_params[kk].weight0.cols(); j++)
			{
				m_params[kk].weight0(i,j) = params[idx];
				idx++;
			}
		}
		for(int j = 0; j < m_params[kk].bias0.size(); j++)
		{
			m_params[kk].bias0[j] = params[idx];
			idx++;
		}
  
		for(int i = 0; i < m_params[kk].weight2.rows(); i++)
		{
			for(int j = 0; j < m_params[kk].weight2.cols(); j++)
			{
				m_params[kk].weight2(i,j) = params[idx];
				idx++;
			}
		}
		for(int j = 0; j < m_params[kk].bias2.size(); j++)
		{
			m_params[kk].bias2[j] = params[idx];
			idx++;
		}

		for(int i = 0; i < m_params[kk].weight4.rows(); i++)
		{
			for(int j = 0; j < m_params[kk].weight4.cols(); j++)
			{
				m_params[kk].weight4(i,j) = params[idx];
				idx++;
			}
		}
		for(int j = 0; j < m_params[kk].bias4.size(); j++)
		{
			m_params[kk].bias4[j] = params[idx];
			idx++;
		}
	}
}

void TireNetwork::getParams(VectorS &params, int idx)
{
	assert(params.size() == getNumParams());

	for(int kk = 0; kk < num_networks; kk++)
	{
		for(int i = 0; i < m_params[kk].weight0.rows(); i++)
		{
			for(int j = 0; j < m_params[kk].weight0.cols(); j++)
			{
				params[idx] = m_params[kk].weight0(i,j);
				idx++;
			}
		}
		for(int j = 0; j < m_params[kk].bias0.size(); j++)
		{
			params[idx] = m_params[kk].bias0[j];
			idx++;
		}
  
		for(int i = 0; i < m_params[kk].weight2.rows(); i++)
		{
			for(int j = 0; j < m_params[kk].weight2.cols(); j++)
			{
				params[idx] = m_params[kk].weight2(i,j);
				idx++;
			}
		}
		for(int j = 0; j < m_params[kk].bias2.size(); j++)
		{
			params[idx] = m_params[kk].bias2[j];
			idx++;
		}

		for(int i = 0; i < m_params[kk].weight4.rows(); i++)
		{
			for(int j = 0; j < m_params[kk].weight4.cols(); j++)
			{
				params[idx] = m_params[kk].weight4(i,j);
				idx++;
			}
		}
		for(int j = 0; j < m_params[kk].bias4.size(); j++)
		{
			params[idx] = m_params[kk].bias4[j];
			idx++;
		}
	}
}



int TireNetwork::load_model(){
	std::cout << "Loading Model\n";
    
	for(int kk = 0; kk < num_networks; kk++)
	{
		m_params[kk].weight0 <<
			-1.6153e-01, -4.0853e-01, -2.9915e-02,  1.1926e+00,  7.2994e-02,
			3.1051e-01,  1.0205e-03, -4.3476e-01,  3.8243e-02,  2.1884e+00,
			-3.1319e+00,  3.2378e-01, -1.9749e-01, -2.2482e+00,  1.6180e+00,
			-1.4267e-01, -3.9280e-01,  8.3776e-01,  1.1601e+00,  2.3249e+00,
			-3.3213e-01,  1.9151e+00, -9.1663e-01,  1.0944e+00, -1.3482e-01,
			1.3570e+00, -1.0966e+00,  1.2237e-01, -9.9238e-02,  1.4596e+00,
			-5.0263e-02, -4.7494e-03, -6.2651e-02, -1.4996e+00,  7.1035e-01,
			3.5239e-01,  1.9841e-01, -2.5923e-01, -2.0797e-01, -2.6620e-01,
			-4.3298e-02, -1.2693e-01,  7.6401e-02, -4.7962e-02, -1.3233e-02,
			-1.3006e+00,  9.3506e-01,  1.0199e-01, -2.3618e-01,  1.9368e+00,
			-5.8643e-01, -8.4698e-02,  7.9859e-02, -1.8189e+00,  1.8861e+00,
			7.0998e-02,  2.6892e-01,  1.1025e-01, -1.1567e-01, -1.1109e+00,
			-1.1541e-01, -1.4531e+00,  2.1899e+00,  5.4005e-01, -2.4498e-01,
			7.1345e-01, -1.1706e-01, -3.3587e-01,  3.1401e-01,  1.5045e+00,
			-1.4984e+00, -1.2972e+00, -1.5141e-01, -2.2355e+00,  3.2580e+00,
			7.3815e-02,  6.5236e-02,  1.6173e+00, -8.5755e-01,  4.7988e-01,
			3.7669e-01, -2.9895e-02,  3.6389e-02, -1.1156e-02, -3.0711e-01,
			3.5765e-02,  6.2022e-03,  1.3447e-01,  1.2275e-01, -2.6208e-01,
			3.4564e-01, -6.4627e-02,  1.4973e-01, -6.5147e-02, -8.7758e-02,
			-2.4922e-01,  1.5986e-02, -1.5040e-01, -1.2969e+00, -2.4592e-01,
			-9.3250e-02, -2.4517e-01, -2.0716e-01, -1.5330e-01,  3.1625e-01,
			5.6727e-01, -3.1027e-01, -3.4917e-01, -2.4362e-01,  7.2696e-01,
			-1.1202e+00,  8.2796e-02, -3.6808e-01,  1.1499e+00,  5.9646e-01,
			8.6208e-01,  1.5790e-01,  7.3293e-02, -4.7885e-02,  2.7382e-01,
			-8.0399e-02,  2.0801e-02, -1.1660e-01, -2.6139e-01,  5.2112e-01,
			7.1072e-01, -4.1397e-01,  5.9222e-01;
		m_params[kk].bias0 <<
			-0.1652, -0.9733, -1.9655, -0.6174,  3.2070,  0.6743,  0.4771,  2.2691,
			-1.8934, -1.0945,  1.0304, -0.0672,  1.7731, -0.3493,  0.2670,  0.7772,
			0.4596,  0.5009,  1.1910,  0.9512,  0.4883,  0.2621,  0.4412,  0.3648,
			-2.2405, -0.8145,  0.7129, -0.7063,  2.2359, -0.3373,  0.3629,  1.0585;
			
		m_params[kk].weight2 <<
			-3.0722e-01,  1.0577e-01,  1.0122e+00,  9.4460e-01, -2.6220e-01,
			4.7199e-01,  7.8456e-02,  1.5737e-01,  4.8260e-01,  3.6731e-01,
			-3.2117e-01,  5.9030e-01,  1.0118e+00,  5.4211e-01,  8.0333e-01,
			1.9501e-01, -3.5809e-01, -3.5397e-01,  1.2204e-01, -8.9089e-01,
			-4.2249e-01, -3.2980e-01, -5.5120e-01,  1.3298e+00, -2.1870e-01,
			1.0406e+00, -2.6159e-01,  8.4554e-01, -1.4350e-01, -7.6423e-01,
			2.3133e-01, -3.3708e-01, -3.7317e-02, -2.4247e-01,  3.6825e-02,
			7.4601e-02,  6.8960e-02, -3.4875e-02,  1.0203e-01,  2.4210e-02,
			-1.1927e-01, -2.3379e-01,  6.9078e-01,  7.7277e-02, -4.8182e-02,
			2.2735e-02, -1.0730e-01,  1.6262e-03, -3.6995e-02,  1.8891e-03,
			2.7035e-02,  3.0213e-02, -4.8767e-01,  1.5703e+00,  1.2193e-01,
			-5.0400e-03,  6.4992e-03,  4.2552e-01, -3.3328e-03,  3.4789e-02,
			1.0785e-02, -4.6368e-01,  7.7237e-01,  7.8527e-02, -1.1937e-01,
			8.7270e-02, -4.6488e-02, -3.7327e-02,  4.5437e-02, -8.0697e-02,
			3.3209e-02, -2.4561e-02,  2.3195e-01, -5.9001e-03, -3.4717e-01,
			-1.0663e-01,  1.2304e-01,  8.3580e-02, -1.4785e-01,  2.6298e-02,
			1.7342e-01,  4.7786e-03, -3.2505e-02,  1.0321e-01,  8.6458e-01,
			-5.5058e-01,  7.0668e-02,  6.2587e-01, -1.6200e-02, -1.8970e-01,
			-7.6922e-02,  1.7821e-02, -6.2574e-02,  6.5689e-01, -1.0394e-01,
			2.6785e-02, -1.8991e-01, -4.8436e-01, -2.1924e+00, -2.0700e-01,
			-4.4242e-01, -6.5437e-01, -1.4673e-01,  9.4729e-01, -3.5740e-01,
			-2.9570e-01,  4.3974e-01,  9.5098e-02,  7.2636e-01, -2.6231e-01,
			2.0990e-01,  6.0750e-01,  6.6441e-01,  8.9887e-02, -8.8351e-01,
			1.7489e-01, -5.0103e-01, -2.6866e-01, -1.8982e-01, -3.3486e-01,
			-5.4316e-01, -3.4329e-01, -1.1009e-01, -2.8425e-01,  2.7795e-01,
			-7.9231e-02,  1.9806e-01,  4.9104e-01,  7.5314e-03,  9.6313e-02,
			4.3303e-02,  1.6127e-03,  2.1752e-01,  4.0276e-04,  8.2264e-02,
			4.3747e-02,  5.5107e-01, -7.1395e-01,  2.3968e-01,  3.1256e-01,
			-1.6033e-01,  2.9024e-01, -6.6874e-02,  7.6449e-02,  4.6836e-01,
			2.8764e-02,  2.8174e-02,  2.1162e-01, -2.3776e-01,  2.1194e-01,
			1.7962e-01, -3.0569e-01, -1.9832e-02, -1.4479e-01, -2.1744e-01,
			6.2991e-03, -1.9556e-01, -5.8545e-01, -8.9325e-02, -4.2927e-01,
			-8.7705e-02,  1.7654e-01, -3.2162e+00,  1.0603e+00, -4.2646e-01,
			-8.7507e-01, -1.1296e+00, -1.1441e+00,  2.2987e+00,  4.7409e-01,
			-3.3192e-02,  4.3651e-01, -1.2296e+00,  1.2781e+00, -1.3966e-01,
			1.0010e+00, -2.4014e-01, -9.9889e-01,  1.8529e+00, -9.2877e-01,
			-5.6149e-02, -5.9823e-02, -1.4930e-01,  3.5775e-01, -9.8577e-01,
			1.5356e-01, -5.9498e-01, -8.4266e-01,  5.7201e-01, -3.5277e-03,
			-3.9907e-02, -1.9636e-01, -1.4360e-01,  1.0024e-02, -5.7339e-01,
			-1.9802e-01, -3.7467e-01, -2.1065e-01,  1.8280e-01,  4.0844e-01,
			-4.1191e-01,  3.6121e-01,  3.6538e-01, -2.0292e-01,  1.4825e-01,
			-1.1748e-01,  1.7235e-01,  2.0733e-01,  1.1597e-02,  9.0443e-02,
			-5.9771e-01,  2.9572e-02, -1.0841e-01, -2.1634e-01,  5.8932e-02,
			-3.6743e-02, -3.8201e-01, -2.3980e-01,  2.7117e-01, -4.4445e-01,
			6.9318e-03, -2.7481e-01, -2.5133e-01,  1.6042e-01,  1.1243e-01,
			3.2494e-01, -4.6149e-02,  9.9851e-02, -1.9674e-01, -2.1650e-01,
			-2.5612e-01,  1.2555e-01,  2.0777e-01, -1.3941e-02, -1.5007e-01,
			7.8189e-02,  2.3101e-01,  8.6141e-02, -1.3092e-02,  8.0465e-03,
			9.7225e-02,  4.9685e-02, -2.9303e-01, -6.8304e-02, -9.7276e-01,
			4.1197e-01, -2.4189e-01, -2.3640e-01, -2.1787e-01,  3.5796e-01,
			-2.8681e-01, -1.5285e-01,  4.7845e-02, -5.2430e-01,  1.7682e-01,
			1.3588e-01, -1.6407e-01,  3.1225e-02,  2.6483e-01, -5.7975e-01,
			-5.1245e-02,  2.4443e-01,  3.3105e-01, -5.7659e-01,  2.8853e-01,
			-2.5379e-01, -5.0691e-01,  3.9172e-02,  1.4027e-01, -6.8584e-01,
			-3.4833e-01, -1.3962e-01,  2.0315e-01, -1.4692e-01, -7.1497e-01,
			4.8221e-01, -6.3214e-02,  7.8374e-03, -2.1206e-01,  1.6505e-01,
			1.2375e+00,  1.5426e-01, -9.0115e-02,  2.1667e-01,  1.7248e-01,
			1.6025e-01,  8.4970e-02,  4.8795e-02,  6.1102e-01, -1.0665e-02,
			2.0266e+00,  8.0004e-01, -3.8783e-01, -7.0149e-01, -1.4095e-01,
			2.5656e-02, -1.2722e+00,  6.1497e-01, -6.9210e-01,  1.3757e-01,
			-6.0443e-01,  3.5810e-01,  2.0114e-01, -2.5711e-01, -4.8146e-01,
			6.3898e-01,  1.1352e+00, -9.2922e-01, -2.8485e-01, -4.0689e-01,
			-3.1660e-02,  5.0860e-02,  6.7384e-01,  4.3413e-01,  5.7859e-01,
			1.0020e-01,  2.0063e-02, -8.4741e-02, -8.9040e-02,  9.9472e-02,
			9.7963e-02,  1.9908e-01, -5.6239e-01, -3.6354e-01,  9.5436e-01,
			-2.8721e-01,  2.7482e-01,  8.8702e-01, -3.8274e-01,  4.6244e-01,
			-7.2827e-01, -6.7437e-01,  2.8124e-01, -1.0503e+00, -2.0486e-02,
			-9.0440e-02, -3.5155e-01, -5.7365e-02, -1.0606e+00,  1.7071e-01,
			6.1718e-02, -4.2215e-01, -2.5319e-01,  2.5546e-01, -2.1345e-01,
			3.3074e-01,  9.6220e-03, -9.0170e-02, -1.6294e-01,  2.5832e-01,
			2.1831e-01,  9.2939e-02,  7.6640e-01, -9.0996e-01, -4.1437e-01,
			-1.4362e-01,  3.0723e-01, -7.8837e-02,  6.1046e-01, -3.6767e-01,
			-2.7378e-01, -5.6107e-01,  1.0147e+00,  3.5874e-01, -6.8420e-02,
			-2.5753e-01, -9.5628e-03,  4.2831e-02,  7.0365e-01,  2.5645e-01,
			-3.2537e-01,  1.8778e-01,  5.1797e-01, -1.9820e-01,  6.9292e-01,
			2.7448e-01, -1.2468e-01, -3.9869e-01,  1.5252e-01, -5.5664e-02,
			-5.8432e-01,  2.4132e-01,  1.0325e-01,  1.1464e+00, -1.5030e-01,
			-5.4514e-01,  1.0452e+00, -8.8933e-01, -9.6470e-01,  1.1738e+00,
			5.7433e-01,  1.7472e+00, -1.7247e+00, -5.7618e-01,  5.6667e-01,
			3.5414e-01,  5.1740e-01, -8.5915e-01,  7.3287e-01, -1.1011e-02,
			9.0364e-02,  1.7417e+00, -1.4104e+00, -1.6156e-02,  3.7951e-01,
			1.0333e-01,  2.8428e-01,  2.9956e-01, -1.2364e+00, -5.6004e-01,
			9.4720e-02, -1.0734e-01, -2.1780e-02, -2.9106e-01,  4.8502e-01,
			5.9220e-02, -9.1767e-01,  7.4470e-01,  2.8690e-01, -1.0248e-01,
			-8.8994e-02, -3.5557e-01, -2.3812e-01, -1.0093e-01,  9.7683e-01,
			4.6411e-01, -8.4852e-01, -3.5388e-01, -9.0704e-01,  4.6191e-02,
			4.0844e-01,  7.5167e-02,  1.3900e-02, -5.8819e-01,  3.5105e-01,
			-1.6552e-01,  2.4123e-02,  3.2550e-02, -5.0580e-01, -3.0329e-01,
			5.1355e-01,  5.3834e-01, -5.8500e-01,  5.7656e-01,  3.3699e-01,
			-9.6640e-01,  2.5498e-02,  9.4206e-01,  1.6147e-01,  9.7733e-02,
			5.7245e-01, -1.0161e-01, -6.6710e-01, -3.4805e-03,  1.7160e-01,
			2.0569e-01,  2.2736e-01,  2.1526e-01, -2.8308e-01,  6.5043e-02,
			6.2871e-01, -2.3893e-02,  2.4886e-01, -8.6368e-02,  4.1798e-01,
			5.6573e-03, -2.4581e-02, -8.0295e-03, -3.6174e-01, -2.1006e-02,
			5.5865e-02, -4.7481e-01,  3.8027e-01,  4.0131e-01, -1.2375e-01,
			1.4170e-01, -4.5418e-01, -7.2581e-01,  4.9974e-02, -5.5410e-01,
			3.5399e-01,  2.9840e-01,  1.1105e-01,  5.5591e-01, -2.3006e+00,
			5.2525e-01,  4.1201e-01,  4.1585e-01, -3.1235e-01, -5.0602e-02,
			2.0041e-01,  4.3107e-01, -8.5713e-01,  7.5664e-01,  6.6021e-01,
			1.1220e+00, -1.0600e+00,  1.8089e-01, -9.5809e-01, -2.2249e+00,
			-5.3553e-01,  1.0865e+00,  1.2460e-01, -9.8979e-01, -2.6034e-01,
			-2.4237e-01, -1.1163e+00, -5.4528e-01, -5.5234e-01, -4.1655e-01,
			-6.0634e-02,  2.4105e-01, -1.1293e-01,  1.9604e-01, -1.2713e-01,
			-5.5279e-02,  2.0697e-02, -1.4001e-01,  9.7618e-02,  7.4956e-02,
			1.1753e-01, -1.8658e-01, -3.6129e-03, -3.2588e-01,  2.2927e-01,
			7.8094e-02,  2.2189e-02,  5.1915e-02,  4.4858e-02, -1.6431e-03,
			-1.0686e-01,  1.6989e-01, -4.1769e-01,  5.7754e-01, -2.4209e-01,
			-3.8114e-01,  1.3974e-02, -5.1449e-02,  3.6191e-02,  4.9631e-02,
			-2.0574e-01, -5.7621e-02,  1.4805e-01,  2.6538e-02,  3.3231e-02,
			4.2339e-02, -1.8299e-03, -8.2062e-02, -3.9666e-01, -9.3089e-02,
			-9.8248e-02,  1.8676e-01,  1.6509e-01, -7.7064e-01,  9.2844e-02,
			-1.6090e-01,  2.0789e-01,  2.9043e-01,  1.9736e-02, -7.3771e-02,
			5.0233e-01, -6.6833e-02,  1.6054e-01,  2.9755e-01, -4.5358e-02,
			5.2311e-01, -3.5690e-02, -4.9052e-01,  1.1390e-01, -4.8575e-01,
			-1.0433e-02,  1.5685e-01,  1.3897e-01,  2.0672e-01, -1.9311e-02,
			-2.1814e-01,  6.5683e-01,  2.2255e-01,  2.3063e+00,  2.1101e+00,
			-1.7186e+00, -1.0972e-01,  1.9305e-01, -3.5939e-01, -3.3300e+00,
			5.4897e-01, -8.6193e-01,  8.8278e-01, -1.9305e+00,  6.4973e-01,
			1.6855e-02, -5.1814e-01, -8.8768e-01,  1.9143e+00,  2.2386e+00,
			-4.2473e-01, -7.2463e-01,  6.4639e-02, -5.6176e-01, -2.6005e-01,
			1.1736e+00,  4.2000e-01,  2.2652e-02,  2.3892e-01,  1.1258e+00,
			-3.4979e-01,  1.9568e-01,  6.0687e-01, -1.5398e-01, -1.3714e-01,
			1.0027e+00, -5.5793e-01, -2.7037e-01,  3.1244e-03,  3.2346e-01,
			-8.1937e-02, -8.3444e-01,  6.8541e-01,  9.4248e-02,  2.0866e-01,
			-1.5729e-02, -6.5351e-01, -1.0761e-01,  2.6463e-01,  2.7191e-01,
			-1.1678e-01, -7.0488e-01,  5.9495e-01,  3.0436e-01,  5.4995e-02,
			4.1137e-01,  1.6341e-02,  2.0465e-01, -1.2645e-01,  3.2974e-01,
			2.1271e-01, -1.4616e-01,  3.1132e-01,  2.8195e-01,  1.6428e-01,
			2.5074e-01, -3.3677e-01,  5.3858e-01,  3.0473e-01, -4.0116e-01,
			-1.2263e-01, -5.6493e-01,  7.4967e-02,  9.8325e-02,  4.2856e-01,
			-1.9169e-01, -8.2118e-02, -5.4229e-02,  5.7377e-01,  3.2560e-01,
			-3.3014e-01, -4.0579e-01, -1.1801e-01,  3.1142e-01,  2.8801e-01,
			4.0197e-01, -8.8587e-02, -3.0534e-02,  3.8558e-01,  2.3104e-01,
			-3.6964e-02,  2.4053e-01,  6.9432e-01,  4.8746e-02,  5.1602e-01,
			4.3328e-01,  2.5742e-02, -1.3811e-01, -1.3009e-01,  1.9396e+00,
			-7.0823e-01,  5.4683e-01,  6.4675e-01,  1.1559e-01, -1.6289e-01,
			-4.7271e-01,  2.6484e-02, -3.4591e-01,  8.5065e-02,  4.0693e-01,
			-1.0065e+00, -3.0844e-01, -8.4620e-01,  3.7588e-01,  2.6293e-03,
			8.4502e-01,  7.9228e-01,  3.0766e-01,  2.6427e-01,  2.2855e-01,
			3.6258e-02,  1.6235e+00, -7.5344e-02,  2.5396e-01,  6.3390e-01,
			-3.4619e-01,  1.9771e-01,  1.6982e-01, -1.0691e-02, -1.8414e-01,
			9.1207e-02,  1.8299e-01, -8.1953e-01,  1.0643e-01,  3.5677e-01,
			4.4941e-01, -8.1917e-01, -1.8303e-01,  2.5781e-01, -2.2552e-01,
			2.6719e-01, -9.6592e-01, -8.1556e-01, -3.4828e-01, -1.5038e-01,
			1.4905e-01, -1.3502e-01, -8.6020e-01,  5.4933e-01, -7.5459e-02,
			2.9926e-01,  1.2926e-01,  2.7619e-01,  9.8733e-01, -1.6073e-01,
			-1.0432e-02,  4.1847e-01, -4.4749e-01,  3.9910e-01, -7.6760e-02,
			1.7688e-01,  2.8730e-01,  7.1567e-01,  6.9172e-02, -8.2868e-02,
			-2.7215e-01, -2.0162e-02, -1.3142e-01, -2.9964e-01,  5.1872e-01,
			7.3619e-01, -1.2176e+00, -8.2582e-01,  2.0478e-01,  2.5668e-01,
			5.1458e-01, -5.6507e-01,  9.8136e-01,  3.5232e-01,  1.4571e-01,
			3.5893e-01, -1.1726e+00, -1.5157e-01, -4.7546e-02, -1.1457e+00,
			4.1877e-01,  7.3288e-01, -2.4706e-02,  8.3064e-01, -2.5059e-01,
			5.2336e-01, -3.1121e-01, -2.4947e-01, -1.8823e-01, -1.6769e-02,
			7.6756e-02,  2.4952e-01,  1.8234e-01, -8.9854e-02, -7.8985e-01,
			-4.5000e-01,  1.3694e+00,  5.4781e-02, -4.1207e-01,  8.1419e-02,
			-4.1600e-01,  7.1375e-01, -8.3802e-01, -2.6712e-01, -3.6930e-01,
			-1.1151e+00,  3.8460e-01, -1.0967e-01, -1.5660e-01, -1.5649e-01,
			-3.5323e-02, -1.0941e-01,  1.0155e+00,  1.7496e-01, -1.1518e-01,
			1.9135e-01, -7.8343e-02,  3.5453e-02, -1.0821e-01, -4.8600e-01,
			-4.0613e-01,  2.7790e-01,  8.9661e-01,  3.3227e-01, -9.0003e-02,
			-1.8506e-01, -2.9081e-01, -1.5727e+00,  1.1379e+00,  6.6784e-01,
			-8.5128e-01, -1.3140e-01, -4.2868e-01, -1.5178e-01, -3.5355e-01,
			3.6075e-01,  1.3350e-01, -7.7028e-01,  6.0834e-01,  2.5265e-01,
			-4.5561e-01,  2.6769e-01, -6.4895e-01, -3.5769e-02,  1.3396e+00,
			5.8614e-01, -2.6719e-01,  3.3442e-01, -2.2400e-01, -1.0744e-01,
			6.7448e-01,  4.2223e-01, -1.4136e-01,  2.3479e-02, -1.7351e+00,
			2.2288e-01, -5.7272e-01, -5.3859e-02, -3.8720e-01, -3.5965e-01,
			8.0196e-01,  4.9470e-01,  1.8987e-02, -2.5070e-01, -3.5905e-01,
			2.2898e-01, -8.4507e-02,  1.0902e+00, -7.8820e-01,  3.4970e-02,
			-1.0560e+00, -4.0105e-01,  1.2999e-01, -2.7079e-01,  8.9569e-02,
			7.5403e-02, -6.0353e-01, -1.5266e-01, -3.0387e-01, -3.9054e-02,
			-3.0731e-01, -3.1611e-01, -3.7481e-01,  3.1225e-01,  1.7225e-01,
			-1.0066e-01, -1.6143e+00,  7.0219e-02, -9.9979e-01, -8.6695e-01,
			-4.1231e-01, -1.2044e+00,  8.6798e-01,  6.5910e-01,  1.6366e-02,
			8.2262e-01, -6.8635e-01, -2.8677e-01, -3.4922e-02,  1.5031e+00,
			-4.2207e-01, -1.1589e+00, -5.0056e-01,  2.5658e-02, -1.2697e-01,
			2.0050e-01,  5.0854e-02, -5.4974e-01,  3.3362e-01,  6.9552e-03,
			3.5981e-02, -3.9608e-01, -8.8750e-01, -1.7225e-01, -6.1618e-01,
			1.2324e-01,  3.7712e-02, -6.8868e-02,  2.9302e+00, -1.2733e+00,
			9.7884e-01,  6.4226e-01,  7.8237e-01,  1.2119e+00, -9.1456e-01,
			-6.2431e-01, -3.8786e-01, -9.5103e-01,  1.5655e+00, -1.1398e+00,
			-1.0696e-01, -1.8168e+00,  2.7909e-01,  8.3812e-01, -1.1472e+00,
			7.7964e-01,  8.7911e-02, -2.2063e-02, -1.4057e-01,  1.4971e-01,
			9.2610e-01,  1.7119e-01,  1.6873e-01,  3.8302e-01,  6.8583e-01,
			-3.8456e-02,  1.9665e-01,  6.3616e-02, -4.0939e-02, -4.2064e-01,
			1.3394e+00, -7.1665e-01, -1.0907e+00,  5.8667e-01,  8.5455e-02,
			1.4025e+00, -2.0116e+00,  2.8619e-01,  5.0920e-01,  1.4004e-01,
			1.1328e-01, -4.1219e-01,  3.1050e-01, -4.8717e-01,  4.5519e-02,
			7.7032e-01, -1.5513e+00,  6.2130e-01, -1.3991e-01,  1.4363e-01,
			2.8705e-01, -6.4706e-01, -4.1672e-01, -6.1854e-01,  3.9989e-01,
			-2.1999e-01,  1.7392e-01, -4.7474e-01,  1.4101e+00,  2.1084e-03,
			5.1234e-01, -2.8141e-02,  1.3631e+00,  3.5397e-01, -2.0267e-01,
			-8.9500e-02, -2.0257e-01, -2.9834e-01, -9.1222e-01,  4.0541e-01,
			-2.7447e-01,  3.5796e-01, -4.7245e-01,  4.9733e-01,  4.7161e-01,
			-1.5162e-02, -4.7152e-01,  8.2434e-02,  1.6810e-02,  5.8854e-02,
			-3.3636e-02,  1.0111e-01,  6.1345e-02,  3.9744e-02,  3.0871e-01,
			3.4197e-01,  1.6620e-01,  1.2955e-01, -3.1069e-01, -3.7260e-01,
			-5.2184e-02,  1.1867e-01, -1.0158e-01,  3.6305e-01,  5.3788e-01,
			-7.0714e-01,  1.2591e+00,  2.8850e-01,  1.1884e-01,  7.9550e-01,
			-1.3077e+00, -7.0606e-01, -1.3771e-01, -9.6277e-01,  6.2669e-01,
			-4.9290e-01, -1.0527e-01, -7.4452e-01,  1.6033e-01,  1.4973e+00,
			-5.4674e-01,  4.6141e-01,  2.1232e-01,  3.5112e-01, -6.2881e-02,
			2.5795e-01, -8.4596e-01, -5.6154e-02,  1.9923e-01, -9.8509e-02,
			1.0371e+00, -2.4548e-01,  2.9606e-01,  1.1819e-01;

		m_params[kk].bias2 <<
			-0.2376, -0.1178,  0.2088,  0.2790, -0.1876, -0.3441,  0.2437, -0.4908,
			-0.1923, -0.0482, -0.6504,  0.6440,  0.5537, -0.6462, -0.3129, -0.0578,
			-0.1953,  0.1497, -0.8611,  0.2039,  0.2210,  0.2569,  0.1858, -0.7618,
			-0.0413, -0.5859,  0.0695,  0.0773, -0.0541,  0.4505, -0.0790, -0.2922;
    
		m_params[kk].weight4 <<
			-5.8632e-01,  2.4312e-01, -1.6592e-01,  1.6010e+00, -7.4945e-01,
			-1.3750e+00,  8.9535e-01, -5.2621e-01, -2.3103e+00,  7.7188e-01,
			2.2256e-02,  4.6421e-01,  1.5850e+00, -4.9725e-01, -6.3555e-01,
			1.0465e+00, -1.0944e+00, -1.1626e+00,  1.6331e+00,  1.0483e+00,
			-5.8869e-02, -5.3676e-01,  2.0860e+00, -1.3468e-01, -9.5879e-01,
			-3.0335e-01,  1.5578e+00,  1.9508e+00, -1.5575e+00,  1.4697e+00,
			9.8731e-01,  1.0286e-01, -1.2026e+00,  2.3340e-02, -9.4825e-02,
			7.8250e-01, -3.2354e-01,  2.1534e+00,  8.8677e-01, -4.2453e-01,
			3.2662e-01,  1.7812e+00, -9.1111e-01,  1.0007e+00,  1.4795e+00,
			-1.2300e+00, -1.1795e+00, -3.4467e-02, -4.0695e-01, -9.1221e-01,
			3.3756e+00, -4.4077e-01,  1.1421e+00,  1.0589e+00, -1.9522e-01,
			-1.1812e+00, -1.1870e+00, -9.9756e-01, -2.4542e-02,  3.2154e-01,
			2.2686e+00, -1.0989e-01,  1.4256e+00, -2.6943e+00, -4.9907e-02,
			-2.0036e+00,  2.0722e+00, -4.6125e-02, -2.3955e-01,  3.2794e-03,
			2.6196e-01, -4.2381e-01,  1.2605e-02,  3.7458e-02, -3.3978e-03,
			9.8604e-01, -3.8551e-03, -6.8526e-01,  1.8913e-02, -2.4305e-02,
			-8.7516e-01, -1.3613e-01, -3.7344e-02, -5.6861e-03,  2.5186e-01,
			3.4323e-03,  1.5092e-02, -9.4278e-01,  4.1240e-03, -5.4750e-01,
			-1.1360e-02, -1.9223e-03,  9.1610e-03, -1.8913e-02, -6.3372e-02,
			-2.3770e-02;
		m_params[kk].bias4 <<
			0.1295, 0.7296, 0.6017;
	}
    
	return 0;
}
