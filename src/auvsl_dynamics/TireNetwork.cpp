#include "TireNetwork.h"
#include "generated/model_constants.h"
#include <cmath>
#include <cppad/cppad.hpp>
#include <iostream>


Eigen::Matrix<Scalar,TireNetwork::num_hidden_nodes,TireNetwork::num_in_features> TireNetwork::weight0;
Eigen::Matrix<Scalar,TireNetwork::num_hidden_nodes,TireNetwork::num_hidden_nodes> TireNetwork::weight2;
Eigen::Matrix<Scalar,TireNetwork::num_out_features,TireNetwork::num_hidden_nodes> TireNetwork::weight4;
Eigen::Matrix<Scalar,TireNetwork::num_hidden_nodes,1> TireNetwork::bias0;
Eigen::Matrix<Scalar,TireNetwork::num_hidden_nodes,1> TireNetwork::bias2;
Eigen::Matrix<Scalar,TireNetwork::num_out_features,1> TireNetwork::bias4;
Eigen::Matrix<Scalar,TireNetwork::num_out_features,1> TireNetwork::out_std;
Eigen::Matrix<Scalar,TireNetwork::num_in_features,1> TireNetwork::in_mean;
Eigen::Matrix<Scalar,TireNetwork::num_in_features,1> TireNetwork::in_std_inv;


int TireNetwork::is_loaded = 0;


TireNetwork::TireNetwork(){
  if(!is_loaded){
    load_model();
  }
}
TireNetwork::~TireNetwork(){}

//type overloading problem when taking address of std::tanh
//there is probably a smarter way to do this with templates.
inline double tanh_double_wrapper(double x){
  return std::tanh(x);
}

inline Scalar tanh_scalar_wrapper(Scalar x){
  return CppAD::tanh(x);
}

inline Scalar relu_wrapper(Scalar x){
  Scalar zero{0};
  return CppAD::CondExpGt(x, zero, x, zero);
}


// vx vy w zr kc kphi n0 n1 phi
void TireNetwork::forward(const Eigen::Matrix<Scalar,9,1> &in_vec, Eigen::Matrix<Scalar,num_out_features,1> &out_vec){
  Eigen::Matrix<Scalar,TireNetwork::num_hidden_nodes,1> layer0_out;
  Eigen::Matrix<Scalar,TireNetwork::num_hidden_nodes,1> layer2_out;
  Eigen::Matrix<Scalar,TireNetwork::num_out_features,1> layer4_out;
  Eigen::Matrix<Scalar,TireNetwork::num_in_features,1> scaled_features;
  Eigen::Matrix<Scalar,TireNetwork::num_in_features,1> bekker_vec;
  
  // Changes features to cross the origin
  Scalar tire_tangent_vel = in_vec[2] * Jackal::rcg::tire_radius;
  Scalar diff = tire_tangent_vel - in_vec[0];
  Scalar slip_lon = CppAD::abs(diff);
  Scalar slip_lat = CppAD::abs(in_vec[1]);
  Scalar tire_abs = CppAD::abs(in_vec[2]);
  
  bekker_vec[0] = in_vec[3];
  bekker_vec[1] = slip_lon;
  bekker_vec[2] = tire_abs;
  bekker_vec[3] = slip_lat;
  // bekker_vec[4] = in_vec[4];
  // bekker_vec[5] = in_vec[5];
  // bekker_vec[6] = in_vec[6];
  // bekker_vec[7] = in_vec[7];
  // bekker_vec[8] = in_vec[8];

  // Apply scaling after calculating the bekker features from kinematics
  scaled_features = (bekker_vec - in_mean).cwiseProduct(in_std_inv);

  // Actual NN math
  layer0_out = (weight0*scaled_features) + bias0;
  layer0_out = layer0_out.unaryExpr(&tanh_scalar_wrapper);
  layer2_out = (weight2*layer0_out) + bias2;
  layer2_out = layer2_out.unaryExpr(&tanh_scalar_wrapper);
  layer4_out = (weight4*layer2_out) + bias4;        
  
  // Sign change passivity haxx
  out_vec[0] = relu_wrapper(layer4_out[0])*(1*diff);
  out_vec[1] = relu_wrapper(layer4_out[1])*(-1*in_vec[1]);
  out_vec[2] = relu_wrapper(layer4_out[2])/(1 + CppAD::exp(-1*in_vec[3]));
  
  // Scale output
  out_vec = out_vec.cwiseProduct(out_std);
}


int TireNetwork::getNumParams()
{
  return (weight0.size() +
	  bias0.size() +
	  weight2.size() +
	  bias2.size() +
	  weight4.size() +
	  bias4.size());
}

void TireNetwork::setParams(const VectorS &params, int idx)
{
  assert(params.size() == getNumParams());
  for(int i = 0; i < weight0.rows(); i++)
  {
    for(int j = 0; j < weight0.cols(); j++)
    {
      weight0(i,j) = params[idx];
      idx++;
    }
  }
  for(int j = 0; j < bias0.size(); j++)
  {
    bias0[j] = params[idx];
    idx++;
  }
  
  for(int i = 0; i < weight2.rows(); i++)
  {
    for(int j = 0; j < weight2.cols(); j++)
    {
      weight2(i,j) = params[idx];
      idx++;
    }
  }
  for(int j = 0; j < bias2.size(); j++)
  {
    bias2[j] = params[idx];
    idx++;
  }

  for(int i = 0; i < weight4.rows(); i++)
  {
    for(int j = 0; j < weight4.cols(); j++)
    {
      weight4(i,j) = params[idx];
      idx++;
    }
  }
  for(int j = 0; j < bias4.size(); j++)
  {
    bias4[j] = params[idx];
    idx++;
  }
}

void TireNetwork::getParams(VectorS &params, int idx)
{
  assert(params.size() == getNumParams());
  
  for(int i = 0; i < weight0.rows(); i++)
  {
    for(int j = 0; j < weight0.cols(); j++)
    {
      params[idx] = weight0(i,j);
      idx++;
    }
  }
  for(int j = 0; j < bias0.size(); j++)
  {
    params[idx] = bias0[j];
    idx++;
  }
  
  for(int i = 0; i < weight2.rows(); i++)
  {
    for(int j = 0; j < weight2.cols(); j++)
    {
      params[idx] = weight2(i,j);
      idx++;
    }
  }
  for(int j = 0; j < bias2.size(); j++)
  {
    params[idx] = bias2[j];
    idx++;
  }

  for(int i = 0; i < weight4.rows(); i++)
  {
    for(int j = 0; j < weight4.cols(); j++)
    {
      params[idx] = weight4(i,j);
      idx++;
    }
  }
  for(int j = 0; j < bias4.size(); j++)
  {
    params[idx] = bias4[j];
    idx++;
  }
}



int TireNetwork::load_model(){
  std::cout << "Loading Model\n";
    
  is_loaded = 1;
  weight0 <<  3.0945e-01, -7.1453e-01, -9.6507e-02, -8.0684e-02,  8.0008e-02,
         1.0644e+00, -5.3995e-02,  1.1910e-02,  4.6509e-01,  1.5876e-01,
        -2.6738e-01,  5.7870e-02,  5.0185e-02,  4.6369e-01,  3.0742e-02,
        -1.2495e-01, -2.2968e-01,  1.3444e+00,  2.7462e-03,  7.5551e-02,
         2.8366e-01,  8.6159e-02, -1.5428e-02, -1.5580e-01, -2.4379e-02,
        -1.0170e+00,  4.3488e-01,  1.2120e-01, -3.5804e-01,  1.5381e-01,
        -5.9466e-03, -5.5297e-02,  4.2656e-01, -5.1081e-01, -4.1434e-01,
         2.9381e-01,  6.3206e-02,  3.0419e-01,  3.9756e-02,  4.5263e-01,
        -6.0138e-01,  6.8325e-02, -1.5613e-02,  1.1077e-01,  3.5304e-02,
        -6.3032e-01, -7.2310e-02,  1.1237e-01,  2.6121e-02, -1.2132e+00,
         3.2165e-01, -2.9555e-01,  2.1452e-01, -5.7977e-01, -5.8737e-02,
        -6.6490e-01, -4.5508e-01, -2.4491e-01,  9.6018e-01, -2.2943e-01,
         1.7649e-01,  4.6274e-01, -3.8881e-02, -2.2215e-01, -2.0235e-01,
        -6.8519e-01, -1.4796e-01,  2.7423e-01, -1.2944e-01, -9.9633e-01,
         3.3545e-02,  1.9564e+00,  3.3009e-01,  9.7800e-01, -4.5845e-01,
        -1.6905e+00, -1.8101e-01, -1.5201e+00,  8.8712e-01, -1.1233e-01,
         2.4894e-01,  1.4506e+00, -4.0291e-01, -1.3130e+00,  9.6854e-02,
        -1.5459e+00, -8.7252e-02,  1.5322e-02, -5.8541e-01,  2.6021e-02,
        -3.2099e-02, -1.6700e-01,  2.7065e-01,  2.2335e-01,  5.1610e-02,
         4.0626e-02,  1.1930e-01, -3.2476e-03, -1.1359e-04,  2.3780e-01,
        -3.7202e-02,  1.6474e-01, -4.5391e-02, -6.1613e-02,  1.4849e-02,
        -8.4242e-01,  3.1493e-02,  1.0481e-01,  2.9461e-01,  1.3036e+00,
         8.5507e-02, -2.4700e-01,  3.3628e-01,  1.3433e+00, -3.4357e-01,
         8.2714e-02, -1.7547e-01,  9.2125e-01,  8.2906e-02, -3.7990e-02,
        -3.7816e-01, -1.2935e-01,  6.2496e-01,  2.3068e-01,  2.3797e-01,
        -1.9128e+00, -3.0562e-01,  1.5812e+00;
bias0 << -1.3560,  1.4290,  0.0602,  0.9749,  0.4936, -0.4643, -1.6531,  0.3886,
        -1.7555,  1.0228, -0.9903, -1.1128, -1.5621, -2.1382, -0.5311,  0.5927,
        -1.2145,  1.2983, -1.8542, -1.3151,  0.6721, -2.5453, -0.9583, -0.1602,
        -0.1162,  0.2191, -1.3954,  0.8948,  1.4769, -0.6881, -0.4467,  0.0309;
weight2 <<  1.5979e-01, -2.4942e-01, -2.1071e-01, -1.1563e-01,  1.5223e-01,
         9.6637e-02,  3.0392e-01, -2.7331e-01,  1.5513e-01,  4.3511e-02,
         1.5807e-01,  7.6049e-02,  8.8411e-01, -2.5471e-01,  1.3377e-01,
         2.2686e-01,  2.7559e-01,  3.8305e-01, -8.0504e-01, -2.0179e-01,
        -9.6886e-02,  5.2558e-01,  5.6197e-02, -1.3180e-01,  3.0908e-01,
        -2.2018e-02,  1.6187e-01, -1.5478e-01,  4.8836e-02, -3.7730e-02,
        -8.2704e-02,  3.1752e-02, -2.1572e-01,  9.5941e-02,  7.6303e-01,
         1.0639e+00, -9.9962e-01, -8.7295e-02, -4.2817e-01, -5.7746e-02,
        -2.9100e-01, -1.4485e-01, -2.4129e-01, -4.3028e-01, -2.7105e-01,
        -3.2464e-01,  4.5186e-01,  7.6572e-02, -6.2075e-01,  3.3434e-01,
        -9.4840e-02,  4.9219e-02,  4.2509e-02, -4.4181e-01,  3.9082e-01,
        -1.5150e+00, -4.2571e-01,  5.4712e-01, -1.3792e-01, -3.5961e-01,
         1.3490e-01, -1.8059e-01,  4.6901e-01,  9.1255e-01,  6.6239e-01,
        -1.0170e+00, -2.0622e-01, -1.0080e+00,  8.2534e-01,  4.5821e-01,
         3.1587e-02,  7.0628e-02,  3.4651e-01, -2.9056e-01,  9.9760e-02,
         7.2058e-02,  1.4030e+00,  3.2295e-01, -9.4343e-01,  1.9954e-02,
         3.0565e-01,  1.3139e-01, -6.9262e-02,  2.3287e-01, -1.1904e+00,
         1.9744e+00,  2.2726e-01, -3.4752e-01, -3.2407e-01,  7.7114e-02,
         1.5101e+00,  2.2894e-01, -2.5983e-01,  8.9021e-01,  1.2164e-01,
        -3.4280e-01, -1.1237e-01,  2.6458e-01, -8.5127e-02,  2.8149e-01,
        -7.6378e-01, -7.5013e-01, -3.3956e-01,  2.3530e-01,  4.7154e-01,
        -2.8407e-02,  6.2789e-01, -4.0503e-01, -5.1103e-01,  3.7568e-01,
         7.4315e-01, -3.4712e-02,  4.8829e-01,  3.8435e-01, -1.0310e+00,
        -1.3644e+00, -9.1946e-02, -1.7462e+00,  4.0602e-01, -1.6268e-01,
        -1.9907e-02, -1.6233e-01, -4.4895e-01, -4.7839e-02,  1.4117e+00,
        -3.1579e-01, -1.6999e-01, -7.5310e-01,  3.2753e-01,  2.5375e-01,
         5.3422e-02, -2.0935e-01,  2.3954e-02,  7.4250e-01, -3.1837e-02,
        -8.1598e-01, -5.2626e-02, -3.2565e-02, -5.0061e-01, -1.0693e-01,
         1.6789e-02,  2.4497e-02,  1.2894e-02,  2.0001e-01,  2.5964e-04,
         6.3744e-03,  1.2598e-04,  5.3544e-03, -6.4036e-04, -1.3232e-01,
        -2.6927e-01,  3.8487e-01,  2.5972e-01,  5.7500e-02,  3.5333e-01,
         1.1819e-02, -3.2971e-02, -3.0854e-02,  3.6823e-03, -4.8648e-03,
         4.9968e-01,  1.5613e-01,  3.1451e-01, -7.9789e-01,  6.5283e-01,
         2.8345e-01,  4.0547e-01,  1.2812e-01,  5.6405e-01,  5.4651e-01,
         2.5871e+00,  3.6263e-01,  2.2080e-01,  4.9552e-01, -4.6331e-01,
        -1.5419e-01,  1.5588e-01,  1.5353e-01,  3.7976e-01, -1.6104e-01,
        -7.8493e-01,  2.3975e-01,  4.3361e-02,  1.1053e+00, -3.5582e-01,
        -5.3272e-01,  4.8340e-01,  6.2780e-01,  4.0312e-01,  1.2574e+00,
        -1.2274e-01, -3.2490e-05,  7.3479e-01, -1.0507e-01, -3.0881e-01,
        -7.6298e-01,  5.8247e-01,  2.1583e-02,  4.2697e-01, -1.9576e-01,
         2.4333e-01,  1.2206e-02,  2.7814e-01,  2.2162e-01, -2.3736e-01,
        -3.3449e-02, -4.5562e-01, -9.9511e-02,  6.2165e-01, -2.3630e-01,
         1.5910e-01, -6.4878e-02, -2.4603e-01,  1.4310e+00,  4.2088e-01,
        -2.8620e-01,  2.5634e-02,  3.2984e-01,  6.7134e-01,  3.7248e-01,
        -1.2191e-01,  6.1242e-01,  1.0150e+00, -1.4147e-01, -1.5716e+00,
         1.4570e+00,  4.3987e-01,  1.8563e+00, -6.1222e-01, -2.7600e-01,
        -1.5334e+00,  2.4846e-01, -4.1015e-01,  6.1112e-01, -2.4383e-01,
        -3.0400e+00, -4.0272e+00,  2.6458e-01,  1.6465e-01,  6.7097e-01,
        -1.0993e+00, -2.9342e-01,  1.0542e-01, -1.3749e-01,  1.1954e+00,
        -3.4340e+00, -4.3157e-01,  6.0148e-02,  2.3207e-01,  2.3867e-01,
        -2.7810e+00, -3.2579e-02,  1.3114e+00, -7.6459e-01, -5.6989e-01,
        -1.8109e-01,  5.7287e-01, -8.2372e-01,  3.4270e-01, -6.8987e-01,
         2.5424e-01,  1.3590e-01,  2.9975e-01, -1.3772e-01,  4.7852e-01,
        -7.7018e-01, -4.2453e-01, -7.3737e-03,  5.8177e-01, -1.6544e-01,
         9.5768e-02,  4.2650e-01,  5.1770e-01,  7.6642e-01, -7.8335e-01,
        -1.3233e+00,  6.5251e-01, -6.9605e-02,  3.3008e-01, -1.5577e-01,
        -1.7242e-01,  7.1362e-02,  6.4923e-01, -1.9904e-01, -6.0633e-01,
         2.4383e-01,  4.9677e-01, -2.1273e-02, -3.8862e-01,  2.6436e-01,
         1.0925e-02,  6.1880e-02, -1.7538e-02,  1.8098e-01,  4.9760e-01,
         1.6942e-01, -1.3044e-01,  3.1114e-01,  1.1143e-01, -3.9945e-01,
        -2.7762e-01, -4.5516e-01,  1.6396e-01, -6.5276e-02,  3.4937e-01,
         3.4649e-02, -1.4196e-01,  3.9825e-02, -1.5619e-01, -2.9591e-01,
         2.5361e-01,  1.0756e-01, -7.5276e-02,  3.0628e-02, -2.0458e-01,
        -6.5838e-02, -3.2478e-01,  4.2941e-01, -1.2856e-01,  8.7885e-02,
         2.1554e+00, -1.7850e+00, -9.5739e-02, -6.3887e-01,  4.8984e-01,
        -7.1798e-02,  1.4806e+00, -6.7100e-01,  1.8697e-01, -2.9119e-01,
         5.1927e-02,  1.3937e+00,  3.2506e+00,  5.7948e-01,  1.9616e-01,
        -5.7219e-01,  1.3365e+00, -2.6847e-01,  4.3728e-01,  1.7880e+00,
        -2.7900e-01,  4.8841e+00, -2.6097e-01, -1.2523e-01,  1.7952e-01,
        -2.6568e-01,  2.0857e+00,  1.8709e-01, -1.6512e+00,  3.0908e-01,
         2.1009e-01,  8.0255e-01,  1.2722e-01,  7.4356e-02,  9.7792e-02,
         2.4912e-03, -4.9857e-02,  2.7869e-01, -3.2878e-02, -7.1660e-01,
        -9.3136e-02,  3.0246e-02, -5.1277e-01, -5.2341e-02,  9.0236e-03,
         1.4643e-01,  1.2996e-03,  8.1171e-02, -1.4778e-01, -2.5022e-02,
         2.2884e-02,  2.8669e-02,  1.2189e-03,  1.2661e-01, -3.9299e-01,
         1.1773e-01,  1.2673e-01, -9.7336e-02,  1.5620e-02, -3.0881e-02,
         3.9950e-02,  5.6262e-03, -1.6916e-02, -1.5112e-02, -4.5013e-01,
         9.8964e-02, -3.0459e-01, -1.4097e-01, -9.1542e-02,  2.7799e-02,
        -2.2475e-01,  3.8241e-01, -2.3953e-01, -7.7236e-01,  4.6688e-01,
        -2.2920e-02, -1.6404e-01,  4.7294e-01,  3.8356e-02, -1.4851e-01,
        -3.0412e-02, -5.0195e-02,  1.0602e-01,  2.4109e-01, -2.7338e-02,
        -2.0450e-01,  7.3134e-02,  4.0303e-01, -1.5023e-01,  1.0935e-01,
        -2.3926e-01,  3.1281e-01, -2.2918e-01,  2.3844e-01, -1.0739e-01,
        -7.3862e-02, -1.0884e-01, -3.2644e-01, -2.6686e-01,  7.9694e-01,
        -1.7049e-02, -1.1811e+00, -8.4820e-03,  1.3667e+00, -1.1138e-02,
        -1.7777e-02,  4.8345e-02,  1.1633e-01, -3.4892e-02, -1.9324e-01,
        -1.3578e-02,  9.2327e-02,  1.5671e-01,  8.9275e-03,  1.2242e-04,
        -3.1906e-02,  3.5082e-03, -1.1727e-01,  5.7041e-02, -6.6706e-01,
        -3.2161e-01, -1.5648e-01, -1.0736e-01, -1.1819e-01,  4.4334e-03,
        -1.1634e-01, -2.1783e-02, -1.7694e-03,  1.3905e+00, -1.6539e+00,
        -2.0990e-01, -6.6474e-01, -3.3941e-01,  2.9616e-01,  1.7838e+00,
        -6.2398e-01,  4.2954e-01, -7.7282e-01, -1.4489e-02,  1.1042e+00,
         2.9081e+00,  1.1019e+00,  1.3279e-01, -3.7290e-01,  1.4477e+00,
        -8.9517e-01,  1.5851e+00,  4.4516e-01, -1.6763e+00,  4.1666e+00,
         7.7535e-02, -2.4872e-01,  5.5131e-02, -1.2884e-01,  1.7781e+00,
        -1.0755e+00, -1.4851e+00,  2.0536e-01,  5.9766e-01,  9.0163e-01,
        -6.9867e-01, -3.8577e-01,  2.3553e-02, -2.5470e-01,  1.0796e-01,
         7.4359e-02, -7.3706e-02, -2.1555e-01,  5.8209e-01, -2.1187e-01,
        -7.0691e-01, -1.8245e-01, -1.6116e-01, -6.8031e-01,  1.6925e-02,
         2.2948e-01,  3.4636e-01,  1.4867e-01, -1.1891e-02, -9.3879e-02,
        -5.5124e-02, -4.4553e-01,  1.6518e-01,  2.2929e-01, -4.3995e-02,
         1.4566e-01,  1.2907e-02,  1.8682e-01, -1.7682e-01,  1.5315e-01,
         2.1817e-02, -1.8660e-02,  1.8834e-01, -4.3172e-01,  3.7768e-01,
         6.8503e-02, -5.5568e-01,  1.0049e-02,  5.0371e-01, -8.6063e-02,
        -1.9264e-02,  1.1657e-01,  2.1021e-01,  1.9897e-01,  3.6526e-01,
         4.8908e-01,  1.2988e-01,  2.3750e-01, -1.5952e-01,  2.4234e-01,
         1.9685e-01, -6.6899e-02,  4.1965e-02,  3.0791e-01, -2.0510e-01,
        -4.8443e-01,  1.3397e-01,  3.6419e-02, -1.7477e-03,  2.1285e-01,
        -5.0277e-01, -2.3630e-01, -2.4630e-01,  2.4415e-01,  1.0462e+00,
        -6.8279e-03,  1.9627e-03, -1.3343e+00,  9.8545e-01,  6.5176e-01,
         6.0694e-01,  1.3084e-01,  8.7417e-01, -1.1485e-01,  5.3568e-01,
         7.4437e-01,  2.4343e-01,  3.8963e-01,  4.4657e-01, -8.3548e-01,
         4.1949e-01, -3.0929e-01,  6.4707e-01, -1.9946e-01, -5.5670e-01,
         6.5618e-01,  4.6682e-01,  1.0644e+00, -7.9343e-01, -1.0011e+00,
         7.3365e-01,  6.3419e-01, -3.1301e-01,  1.1101e+00,  2.6850e-01,
        -3.3140e-01,  5.8926e-01, -6.6655e-01, -3.1755e-01, -3.8443e-01,
        -4.7342e-01,  5.4219e-01,  5.2239e-01,  7.8353e-04, -7.9946e-02,
        -5.8623e-01,  2.5745e-01,  2.9494e-01,  9.1824e-01,  1.6544e+00,
         1.6714e-01,  8.8735e-02, -3.6857e-01, -8.8260e-01,  1.1071e+00,
        -9.8532e-01, -2.9012e-01,  7.8138e-01,  2.7357e-02,  2.3034e-01,
        -3.7743e-01,  1.7300e-01,  4.9843e-01, -6.6284e-01, -3.6804e-01,
        -5.4753e-02,  2.0528e-02,  1.1054e+00, -6.4716e-01,  1.0245e-01,
        -2.6206e-01, -1.3843e-01,  2.7701e-01,  3.1017e-01, -1.2370e-01,
         2.7584e-01, -3.0610e-01, -1.1570e-01, -2.1185e-01,  3.1778e-02,
        -2.2629e-03,  1.3573e-01, -4.1316e-02, -2.0758e-01,  9.5041e-02,
         4.3714e-02,  2.3565e-01, -1.9440e-02,  2.5223e-02, -1.7363e-01,
         4.5082e-01,  4.2856e-01, -2.1743e-01, -2.3973e-02, -1.0327e-01,
         1.2176e-01, -1.8598e-01,  2.2175e-01, -7.1351e-02, -1.3845e-01,
        -3.5541e-02, -3.8777e-01,  2.9479e-01, -2.7495e-01,  1.3142e-01,
        -5.2175e-01,  2.7671e-01,  5.1720e-02,  1.9355e-01,  4.2301e-01,
        -8.1436e-02,  2.9531e-01, -1.0755e-01, -6.8843e-01, -2.1955e-02,
        -1.0198e-01,  5.3401e-01, -9.5510e-02, -1.4798e-01, -6.3667e-02,
         5.9314e-02, -6.0639e-01,  1.0446e-01, -1.0516e-01,  4.2674e-01,
        -1.9945e-01,  2.0202e-01, -1.4343e-01,  1.0126e-01, -1.3966e-01,
         8.0913e-02,  1.2477e-01,  4.2600e-01,  1.5771e-01,  1.7967e-02,
        -6.4596e-01,  5.8618e-01,  2.3112e-01, -2.9738e-01, -1.4395e-01,
         7.5181e-01,  3.7673e-03,  1.2541e+00,  1.7266e-01, -1.2355e-01,
         5.8796e-01, -1.3375e-01,  7.2600e-02,  7.0455e-02,  2.3841e-01,
         1.0544e-01, -2.1690e-01, -3.3378e-01, -8.9754e-02,  8.2787e-01,
        -4.9052e-01, -8.9986e-01, -3.6360e-01,  3.9030e-01,  1.0139e-02,
         9.6504e-02, -9.4644e-03,  5.7983e-01, -1.8732e-01, -2.6493e-01,
        -1.7140e-01, -1.2773e+00, -7.5875e-01,  7.0661e-01,  4.2382e-01,
         1.4742e-01,  5.6195e-01,  2.2521e-01, -1.3404e+00, -5.2811e-01,
         3.5118e-01,  6.1732e-02,  8.5207e-01, -2.3894e-01, -6.1719e-01,
         1.1698e+00, -6.2248e-01,  4.4390e-01,  2.5829e-01,  8.4117e-02,
        -7.4911e-03,  5.8072e-01,  3.7620e-01, -6.1905e-01, -5.3046e-01,
         3.3363e-01,  2.5898e-01,  6.8769e-01, -3.7923e-01,  4.4549e-01,
        -7.9609e-02,  1.0683e+00,  2.1298e-01,  1.0609e+00,  9.2985e-01,
         3.5267e-01, -4.8538e-01, -6.4206e-01, -4.7173e-01,  1.8013e-01,
         1.8710e+00,  3.2455e-01, -3.1658e-01, -9.3412e-01, -6.8674e-01,
        -5.1585e-01,  6.0961e-01, -1.3110e+00, -3.0885e-01, -7.0027e-01,
        -5.7458e-01, -7.0143e-01,  1.2203e+00, -3.8992e-01, -1.3167e+00,
         7.1239e-01,  4.9227e-02, -6.4092e-02, -1.0151e+00,  1.4022e-01,
        -3.7344e-01,  7.9461e-01, -2.7194e-01, -3.4631e-01, -9.6823e-02,
         6.6929e-01,  8.7036e-01, -1.0892e+00,  5.6683e-01, -4.7111e-01,
        -4.5917e-01, -9.1843e-01, -4.9996e-01, -3.4810e-01, -5.5591e-01,
        -2.0814e-01, -3.4966e-01, -2.2363e-01,  4.9815e-01, -3.1478e-01,
         6.7229e-01, -5.0372e-01, -1.7354e-01,  4.3169e-01, -2.9884e-01,
         4.6067e-01, -1.3398e+00,  6.1989e-01,  8.5817e-01, -5.7543e-01,
        -5.4187e-01, -7.8479e-02, -1.0869e+00,  3.2834e-01,  3.5173e-01,
         1.2567e+00, -1.0614e+00, -1.7831e+00, -1.2540e+00,  7.9958e-01,
         1.0001e-01,  1.5333e+00, -6.1807e-01,  1.2228e+00, -7.8151e-01,
        -5.4337e-01,  4.0474e+00,  4.2126e+00,  2.1483e-01,  1.0089e+00,
        -3.6850e-01,  8.2529e-01,  3.4102e-02, -5.6519e-01,  1.1061e+00,
        -5.3964e-01,  3.9560e+00, -5.0515e-01, -1.6155e-01,  8.0582e-02,
         3.2441e-01,  2.8494e+00,  2.9663e-01, -2.0661e+00,  8.0715e-01,
        -2.7522e-01,  2.3481e-01, -2.7956e-01, -6.2977e-02,  3.0532e-01,
         1.1294e-01, -1.8146e-01, -4.8327e-01,  4.5172e-03,  6.4098e-01,
         5.4369e-01,  2.9181e-02,  2.3089e-01, -3.8086e-02, -1.8698e-01,
        -2.9106e-01,  2.1060e-02, -1.2966e-01,  1.6415e-01,  9.2693e-02,
        -7.3964e-02, -1.1755e-02, -1.1818e-01, -5.4811e-01, -4.4650e-02,
        -1.8530e-01,  1.5192e-01,  1.8993e-01,  7.1528e-02,  1.1010e-01,
         1.4089e-01,  7.4943e-02,  4.2901e-02,  2.6409e-02,  2.8092e-01,
        -2.5757e-02, -3.3451e-01, -4.8108e-03,  3.5769e-02, -1.7924e-01,
        -3.8321e-01,  1.0473e+00,  3.4555e-01, -6.7552e-01,  2.6623e+00,
        -9.2910e-02, -2.0879e-01,  2.0716e+00,  5.3248e-02, -1.3630e+00,
        -7.2643e-01,  3.8251e-02, -2.9938e-01,  1.7363e-01,  1.9744e-01,
         1.5270e-01,  1.5585e+00,  1.7471e-01, -1.0658e+00, -2.3836e-01,
        -4.0301e-01, -3.6448e-01,  1.7447e-01,  2.5764e-01, -6.3731e-02,
         2.2347e-01,  5.3884e-01, -8.0163e-01,  4.9052e-01, -1.2970e+00,
         5.7243e-01,  5.3620e-01, -1.1973e+00,  2.3964e-01,  9.3457e-01,
        -5.5917e-01,  3.6761e-01,  6.1835e-01,  7.9837e-02,  1.0826e+00,
        -2.9568e+00, -3.8178e-01,  7.7860e-01, -1.0727e+00,  5.7166e-01,
         3.5991e+00, -4.1578e-01,  1.8700e+00,  1.4853e-01,  5.2664e-01,
        -1.3266e-01,  1.0870e-01,  1.0587e+00, -1.8325e-01, -5.2236e-01,
         8.1391e-01, -6.8066e-01,  7.9120e-01, -4.3639e-01,  5.3554e-01,
         8.6674e-02, -6.6274e-02,  2.8368e-01, -3.0154e-02,  3.1766e-01,
         3.8101e-01,  3.8432e-02,  5.4220e-01,  1.0855e-01,  1.3823e-01,
        -9.2928e-01, -1.1590e+00, -1.2611e-01, -3.6942e-01,  1.8109e-01,
         3.7613e-01, -4.5407e-01,  1.0614e+00, -2.0567e-01, -8.1417e-01,
         2.7107e-01, -2.7925e-02, -2.2441e-01,  1.4551e-01, -1.7983e-01,
         1.9859e-01,  3.8997e-01, -1.8445e-01, -5.1218e-01, -5.4317e-01,
         1.2703e+00, -1.0898e+00, -2.1610e-01, -6.2541e-01, -2.4660e-02,
         7.2754e-01,  1.7296e+00,  4.1583e-03,  4.2260e-01, -2.8411e+00,
         1.3842e-01,  5.3839e-01,  1.0922e+00,  3.6512e+00,  6.0869e-01,
        -1.5198e-01, -1.3792e-01, -3.1082e+00,  2.1397e+00, -1.5454e+00,
        -1.3186e+00,  2.4716e+00,  6.1948e-01, -9.2992e-02, -5.6022e-02,
         4.1257e-02,  7.6878e-01, -1.7935e+00, -1.7931e+00,  3.8425e-01,
        -5.5060e-01,  2.5722e+00, -4.1681e-02, -9.0601e-02, -6.0658e-01,
        -1.9971e-01, -1.6587e-01, -6.0894e-01,  4.4215e-02,  1.5394e-01,
         7.4654e-02, -1.3115e-01,  7.4735e-01,  1.8791e-01,  3.2692e-01,
         1.3754e-01, -9.2165e-02, -1.6973e-01,  2.6080e-02, -2.1367e-01,
         6.6467e-02,  6.9699e-02,  2.1774e-01,  2.6466e-01,  6.6057e-01,
        -2.4570e-01,  4.7592e-02, -1.4435e-01,  2.2074e-01,  9.0957e-02,
        -2.3861e-02,  6.6919e-02, -1.0790e-01, -4.0078e-01;
bias2 << -0.4593,  0.9128, -1.1051,  0.2222, -0.0719, -0.9264, -0.7535,  0.6180,
        -0.7919,  0.1873,  0.1434,  0.4768, -0.3042,  0.2328, -0.1584, -0.0468,
         0.1058, -1.5548, -0.4688, -0.4307, -0.2103, -0.8468, -0.9140,  1.0551,
         0.9393, -0.9731, -0.0148, -0.6488, -0.7026, -0.0138, -1.0320, -0.6527;
weight4 << -1.2949e+00,  6.5501e-01, -8.8210e-01, -1.8535e+00,  1.8091e-01,
        -8.3877e-01, -9.6179e-01,  2.4131e+00, -1.2926e+00, -2.3574e-01,
         1.9420e+00,  4.9842e-01, -7.6510e-01,  1.1091e-01,  8.9981e-01,
        -1.2018e+00,  1.0152e+00, -6.0077e-01,  1.6872e+00, -1.0367e+00,
        -1.4783e+00, -9.1998e-01, -7.1729e-01,  7.8885e-01,  6.2467e-01,
        -1.9439e+00, -1.3731e+00, -7.2937e-01,  2.3389e+00, -5.2070e-01,
         2.6440e+00, -9.2470e-01, -1.1016e+00,  9.3025e-01, -6.8992e-01,
        -1.4461e-02,  3.8849e-01, -8.4346e-01, -9.2456e-01,  3.9437e-01,
        -7.8737e-01, -1.4733e+00, -1.0731e+00,  4.2997e-01, -3.0715e-01,
        -2.4454e-01,  1.7001e+00, -3.5884e-01,  7.7198e-01, -1.0007e+00,
         2.4812e+00, -9.1689e-01, -8.3206e-01, -7.8484e-01, -7.6005e-01,
         7.7630e-01,  6.7965e-01, -1.3782e-01, -3.9997e-01, -8.0705e-01,
        -3.3706e-02, -1.2989e+00,  2.9396e+00, -5.0671e-01,  2.1312e-02,
         3.8262e-01, -3.7357e-01,  2.0298e-02,  1.7569e+00, -4.4331e-01,
        -3.9477e-01, -2.1837e-02, -7.0760e-02,  3.8236e-02, -1.4616e-02,
         1.4650e+00, -1.1467e-01, -1.3441e+00,  1.5863e-04,  3.8328e-01,
        -2.5709e-02, -4.1793e-01, -1.6999e-02, -6.3069e-03,  6.5689e-02,
        -5.2389e-01, -5.4888e-01,  2.1607e-02,  4.4122e-01,  6.5515e-03,
        -2.3139e-01,  9.0441e-02,  1.4283e-02, -3.7106e-02, -6.5529e-03,
         3.3894e-02;
bias4 << 0.6222, 0.5169, 0.3485;
out_std << 44.45929437637364, 44.319044796830426, 55.11481922955709;
in_mean << 0.005049827974289656, 0.5013627409934998, 0.49966344237327576, 0.5000784397125244;
in_std_inv << 0.0028585679829120636, 0.2916049659252167, 0.2884257733821869, 0.288765013217926;

  in_std_inv = in_std_inv.cwiseInverse();
  
  return 0;
}

